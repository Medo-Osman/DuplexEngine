void Material::readMaterials()
{
	std::unordered_map<std::wstring, std::unordered_map<std::wstring, std::wstring>> materials;
	std::vector<std::wstring> textureNames;
	std::wstring letters[4] = { L"D", L"E", L"N", L"ORM" };
	std::wstring fileEnding = L"";

	for (const auto& file : std::filesystem::directory_iterator(m_TEXTURES_PATH))
	{
		std::wstring filePath = file.path();
		std::wstring fileName = filePath.substr(filePath.find_last_of(L"/") + 1);
		std::wstring rawFileName = L"";
		std::wstring textureName = L"";
		if (fileName.rfind(L"T_", 0) == 0)
		{
			rawFileName = fileName.substr(0, fileName.size() - 4);
			fileEnding = fileName.substr(rawFileName.length());
			textureName = rawFileName.substr(2);						// Remove start "T_"
			textureName = textureName.substr(0, textureName.find_last_of(L"_")); // Remove ending "_D"
			if (textureName.find_last_of(L"_") != std::wstring::npos)
				textureName = textureName.substr(0, textureName.find_last_of(L"_")); // Remove shaderprog letter "_E"
			bool isTextrue = false;

			for (int l = 0; l < 4; l++)
			{
				std::wstring testVariable1 = rawFileName.substr(rawFileName.size() - (l == 3 ? 4 : 2), std::wstring::npos);
				std::wstring testVariable2 = L"_" + letters[l];

				if (rawFileName.substr(rawFileName.size() - (l == 3 ? 4 : 2), std::wstring::npos) == L"_" + letters[l])
				{
					materials[textureName][letters[l]] = (rawFileName) + fileEnding;
					isTextrue = true;
				}
			}
			if (std::find(textureNames.begin(), textureNames.end(), textureName) == textureNames.end() && isTextrue == true) // If unique textureName
			{
				textureNames.push_back(textureName);
			}
		}
	}

	for (int i = 0; i < materials.size(); i++)
	{
		//Material mat;
		MATERIAL_INIT_STRUCT mat;
		mat.MaterialID = ++totalMaterialCount;

		for (int l = 0; l < 4; l++)
		{
			if (materials[textureNames[i]].find(letters[l]) == materials[textureNames[i]].end())
			{
				materials[textureNames[i]][letters[l]] = L"T_Missing_" + letters[l] + L".png";
			}
		}

		for (int l = 0; l < 4; l++)
		{
			std::wstring name = materials[textureNames[i]][letters[l]] /*+ fileEnding*/;
			//mat.addTexture(std::wstring(name.begin(), name.end()).c_str());
			mat.fileNames.push_back(name);
		}

		m_MaterialCache[textureNames[i]] = mat;
	}
}